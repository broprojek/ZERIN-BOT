/***************************************************************************************************************************************************************
 *
 * Bin bindings tests
 *
 **************************************************************************************************************************************************************/


const StripColor = require('./_common.js').StripColor;
const Spawn = require('child_process').spawnSync;
const path = require('path');


beforeEach(() => {
	jest.resetModules();
});


test(`Bin - Should call Cli function`, () => {
	jest.doMock('../../lib/index.js', () => ({ Cli: jest.fn() }) );
	const Cfonts = require('../../lib/index.js');

	require('../../src/bin.js');

	expect( Cfonts.Cli.mock.calls.length ).toBe( 1 );
});


test(`Bin - Will output with no flags`, () => {
	const output = Spawn(
		'node',
		[ path.normalize(`${__dirname }/../../src/bin.js`), 'abc' ],
		{
			encoding : 'utf8',
			env: { ...process.env },
		}
	);

	const expected = '' +
		'\n\n' +
		'  █████╗  ██████╗   ██████╗ \n' +
		' ██╔══██╗ ██╔══██╗ ██╔════╝ \n' +
		' ███████║ ██████╔╝ ██║      \n' +
		' ██╔══██║ ██╔══██╗ ██║      \n' +
		' ██║  ██║ ██████╔╝ ╚██████╗ \n' +
		' ╚═╝  ╚═╝ ╚═════╝   ╚═════╝ \n' +
		'\n\n';

	expect( output.stdout ).toBe( expected );
	expect( output.stderr ).toBe( '' );
});


test(`Bin - Will output with color flag`, () => {
	const output = Spawn(
		'node',
		[ path.normalize(`${__dirname }/../../src/bin.js`), 'abc', '-c', 'red' ],
		{
			encoding : 'utf8',
			env: { ...process.env },
		}
	);

	const expected = '' +
		'\n\n' +
		'  \u001b[38;2;255;0;0m█████\u001b[39m╗  \u001b[38;2;255;0;0m██████\u001b[39m╗   \u001b[38;2;255;0;0m██████\u001b[39m╗ \n' +
		' \u001b[38;2;255;0;0m██\u001b[39m╔══\u001b[38;2;255;0;0m██\u001b[39m╗ \u001b[38;2;255;0;0m██\u001b[39m╔══\u001b[38;2;255;0;0m██\u001b[39m╗ \u001b[38;2;255;0;0m██\u001b[39m╔════╝ \n' +
		' \u001b[38;2;255;0;0m███████\u001b[39m║ \u001b[38;2;255;0;0m██████\u001b[39m╔╝ \u001b[38;2;255;0;0m██\u001b[39m║      \n' +
		' \u001b[38;2;255;0;0m██\u001b[39m╔══\u001b[38;2;255;0;0m██\u001b[39m║ \u001b[38;2;255;0;0m██\u001b[39m╔══\u001b[38;2;255;0;0m██\u001b[39m╗ \u001b[38;2;255;0;0m██\u001b[39m║      \n' +
		' \u001b[38;2;255;0;0m██\u001b[39m║\u001b[38;2;255;0;0m  ██\u001b[39m║ \u001b[38;2;255;0;0m██████\u001b[39m╔╝ ╚\u001b[38;2;255;0;0m██████\u001b[39m╗ \n' +
		' ╚═╝  ╚═╝ ╚═════╝   ╚═════╝ \n' +
		'\n\n';

	const expectedWithoutColor = '' +
		'\n\n' +
		'  █████╗  ██████╗   ██████╗ \n' +
		' ██╔══██╗ ██╔══██╗ ██╔════╝ \n' +
		' ███████║ ██████╔╝ ██║      \n' +
		' ██╔══██║ ██╔══██╗ ██║      \n' +
		' ██║  ██║ ██████╔╝ ╚██████╗ \n' +
		' ╚═╝  ╚═╝ ╚═════╝   ╚═════╝ \n' +
		'\n\n';

	expect( output.stdout ).toBe( expected );
	expect( StripColor( output.stdout ) ).toBe( expectedWithoutColor );
	expect( output.stderr ).toBe( '' );
});


test(`Bin - Will output with hex color flag`, () => {
	const output = Spawn(
		'node',
		[ path.normalize(`${__dirname }/../../src/bin.js`), 'abc', '-c', '#ff8800', '#0088ff' ],
		{
			encoding : 'utf8',
			env: { ...process.env },
		}
	);

	const expected = '' +
		'\n\n' +
		'  \u001b[38;2;255;136;0m█████\u001b[39m╗  \u001b[38;2;255;136;0m██████\u001b[39m╗   \u001b[38;2;255;136;0m██████\u001b[39m╗ \n' +
		' \u001b[38;2;255;136;0m██\u001b[39m╔══\u001b[38;2;255;136;0m██\u001b[39m╗ \u001b[38;2;255;136;0m██\u001b[39m╔══\u001b[38;2;255;136;0m██\u001b[39m╗ \u001b[38;2;255;136;0m██\u001b[39m╔════╝ \n' +
		' \u001b[38;2;255;136;0m███████\u001b[39m║ \u001b[38;2;255;136;0m██████\u001b[39m╔╝ \u001b[38;2;255;136;0m██\u001b[39m║      \n' +
		' \u001b[38;2;255;136;0m██\u001b[39m╔══\u001b[38;2;255;136;0m██\u001b[39m║ \u001b[38;2;255;136;0m██\u001b[39m╔══\u001b[38;2;255;136;0m██\u001b[39m╗ \u001b[38;2;255;136;0m██\u001b[39m║      \n' +
		' \u001b[38;2;255;136;0m██\u001b[39m║\u001b[38;2;255;136;0m  ██\u001b[39m║ \u001b[38;2;255;136;0m██████\u001b[39m╔╝ ╚\u001b[38;2;255;136;0m██████\u001b[39m╗ \n' +
		' ╚═╝  ╚═╝ ╚═════╝   ╚═════╝ \n' +
		'\n\n';

	const expectedWithoutColor = '' +
		'\n\n' +
		'  █████╗  ██████╗   ██████╗ \n' +
		' ██╔══██╗ ██╔══██╗ ██╔════╝ \n' +
		' ███████║ ██████╔╝ ██║      \n' +
		' ██╔══██║ ██╔══██╗ ██║      \n' +
		' ██║  ██║ ██████╔╝ ╚██████╗ \n' +
		' ╚═╝  ╚═╝ ╚═════╝   ╚═════╝ \n' +
		'\n\n';

	expect( output.stdout ).toBe( expected );
	expect( StripColor( output.stdout ) ).toBe( expectedWithoutColor );
	expect( output.stderr ).toBe( '' );
});


test(`Bin - Will run all non-gradient flags with console`, () => {
	const output = Spawn(
		'node',
		[
			path.normalize(`${__dirname }/../../src/bin.js`),
			'abc|xxx',
			'-f', 'console',
			'-a', 'right',
			'-c', 'red',
			'-b', 'white',
			'-l', '3',
			'-z', '4',
			'-s',
			'-m', '80',
		],
		{
			encoding : 'utf8',
			env: { ...process.env },
		}
	);

	const expected = '' +
		'\u001b[48;2;255;255;255m\n' +
		'                                                                       ' +
		'\u001b[38;2;255;0;0ma   b   c\u001b[39m\n' +
		'\n\n\n\n' +
		'                                                                       ' +
		'\u001b[38;2;255;0;0mx   x   x\u001b[39m\u001b[49m\n';

	expect( output.stdout ).toBe( expected );
	expect( output.stderr ).toBe('');
});


test(`Bin - Will run all flags and gradient with console`, () => {
	const output = Spawn(
		'node',
		[
			path.normalize(`${__dirname }/../../src/bin.js`),
			'abc|xxx',
			'-f', 'console',
			'-a', 'right',
			'-g', 'red,blue',
			'-b', 'white',
			'-l', '3',
			'-z', '4',
			'-s',
			'-m', '80',
		],
		{
			encoding : 'utf8',
			env: { ...process.env },
		}
	);

	const expected = '' +
		'\u001b[48;2;255;255;255m\n' +
		'                                                                       ' +
		'\u001b[38;2;255;0;0ma\u001b[39m\u001b[38;2;255;127;0m \u001b[39m\u001b[38;2;255;254;0m \u001b[39m\u001b[38;2;127;255;0m \u001b[39m\u001b[38;2;0;255;0mb\u001b[39m\u001b[38;2;0;255;127m \u001b[39m\u001b[38;2;0;255;255m \u001b[39m\u001b[38;2;0;127;255m \u001b[39m\u001b[38;2;0;0;255mc\u001b[39m\n' +
		'\n\n\n\n' +
		'                                                                       ' +
		'\u001b[38;2;255;0;0mx\u001b[39m\u001b[38;2;255;127;0m \u001b[39m\u001b[38;2;255;254;0m \u001b[39m\u001b[38;2;127;255;0m \u001b[39m\u001b[38;2;0;255;0mx\u001b[39m\u001b[38;2;0;255;127m \u001b[39m\u001b[38;2;0;255;255m \u001b[39m\u001b[38;2;0;127;255m \u001b[39m\u001b[38;2;0;0;255mx\u001b[39m\u001b[49m\n';

	expect( output.stdout ).toBe( expected );
	expect( output.stderr ).toBe('');
});


test(`Bin - Will run all flags, gradient and i flag with console`, () => {
	const output = Spawn(
		'node',
		[
			path.normalize(`${__dirname }/../../src/bin.js`),
			'abc|xx',
			'-f', 'console',
			'-a', 'right',
			'-g', 'red,blue',
			'-i',
			'-b', 'white',
			'-l', '3',
			'-z', '4',
			'-s',
			'-m', '80',
		],
		{
			encoding : 'utf8',
			env: { ...process.env },
		}
	);

	const expected = '' +
		'\u001b[48;2;255;255;255m\n' +
		'                                                                       \u001b[38;2;255;0;0ma\u001b[39m\u001b[38;2;255;127;0m \u001b[39m\u001b[38;2;255;254;0m \u001b[39m\u001b[38;2;127;255;0m \u001b[39m\u001b[38;2;0;255;0mb\u001b[39m\u001b[38;2;0;255;127m \u001b[39m\u001b[38;2;0;255;255m \u001b[39m\u001b[38;2;0;127;255m \u001b[39m\u001b[38;2;0;0;255mc\u001b[39m\n' +
		'\n\n\n\n' +
		'                                                                           ' +
		'\u001b[38;2;255;0;0mx\u001b[39m\u001b[38;2;255;254;0m \u001b[39m\u001b[38;2;0;255;0m \u001b[39m\u001b[38;2;0;255;255m \u001b[39m\u001b[38;2;0;0;255mx\u001b[39m\u001b[49m\n';

	expect( output.stdout ).toBe( expected );
	expect( output.stderr ).toBe('');
});


test(`Bin - Will run all flags, gradient, i flag and transition with console`, () => {
	const output = Spawn(
		'node',
		[
			path.normalize(`${__dirname }/../../src/bin.js`),
			'abc|xx',
			'-f', 'console',
			'-a', 'right',
			'-g', 'red,blue',
			'-i',
			'-t',
			'-b', 'white',
			'-l', '3',
			'-z', '4',
			'-s',
			'-m', '80',
		],
		{
			encoding : 'utf8',
			env: { ...process.env },
		}
	);

	const expected = '' +
		'\u001b[48;2;255;255;255m\n' +
		'                                                                       \u001b[38;2;255;0;0ma\u001b[39m\u001b[38;2;223;0;31m \u001b[39m\u001b[38;2;191;0;63m \u001b[39m\u001b[38;2;159;0;95m \u001b[39m\u001b[38;2;127;0;127mb\u001b[39m\u001b[38;2;95;0;159m \u001b[39m\u001b[38;2;63;0;191m \u001b[39m\u001b[38;2;31;0;223m \u001b[39m\u001b[38;2;0;0;255mc\u001b[39m\n' +
		'\n\n\n\n' +
		'                                                                           ' +
		'\u001b[38;2;255;0;0mx\u001b[39m\u001b[38;2;191;0;63m \u001b[39m\u001b[38;2;127;0;127m \u001b[39m\u001b[38;2;63;0;191m \u001b[39m\u001b[38;2;0;0;255mx\u001b[39m\u001b[49m\n';

	expect( output.stdout ).toBe( expected );
	expect( output.stderr ).toBe('');
});


test(`Bin - Will run all non-gradient flags with chrome font`, () => {
	const output = Spawn(
		'node',
		[
			path.normalize(`${__dirname }/../../src/bin.js`),
			'abc|aa',
			'-f', 'chrome',
			'-a', 'right',
			'-c', 'blue,green,yellow',
			'-b', 'red',
			'-l', '4',
			'-z', '3',
			'-s',
			'-m', '80',
		],
		{
			encoding : 'utf8',
			env: { ...process.env },
		}
	);

	const expected = '\u001b[48;2;255;0;0m\n                                                           \u001b[38;2;0;0;255m╔═╗\u001b[39m    \u001b[38;2;0;0;255m╔╗ \u001b[39m    \u001b[38;2;0;0;255m╔═╗\u001b[39m    \n                                                           \u001b[38;2;0;128;0m╠═╣\u001b[39m    \u001b[38;2;0;128;0m╠╩╗\u001b[39m    \u001b[38;2;0;128;0m║  \u001b[39m    \n                                                           \u001b[38;2;255;255;0m╩ ╩\u001b[39m    \u001b[38;2;255;255;0m╚═╝\u001b[39m    \u001b[38;2;255;255;0m╚═╝\u001b[39m    \n\n\n\n                                                                  \u001b[38;2;0;0;255m╔═╗\u001b[39m    \u001b[38;2;0;0;255m╔═╗\u001b[39m    \n                                                                  \u001b[38;2;0;128;0m╠═╣\u001b[39m    \u001b[38;2;0;128;0m╠═╣\u001b[39m    \n                                                                  \u001b[38;2;255;255;0m╩ ╩\u001b[39m    \u001b[38;2;255;255;0m╩ ╩\u001b[39m    \u001b[49m\n';

	expect( output.stdout ).toBe( expected );
	expect( output.stderr ).toBe('');
});


test(`Bin - Will run all flags and gradient with chrome font`, () => {
	const output = Spawn(
		'node',
		[
			path.normalize(`${__dirname }/../../src/bin.js`),
			'abc|aa',
			'-f', 'chrome',
			'-a', 'right',
			'-g', 'blue,green',
			'-b', 'red',
			'-l', '4',
			'-z', '3',
			'-s',
			'-m', '80',
		],
		{
			encoding : 'utf8',
			env: { ...process.env },
		}
	);

	const expected = '\u001b[48;2;255;0;0m\n                                                           \u001b[38;2;0;0;255m╔\u001b[39m\u001b[38;2;51;0;255m═\u001b[39m\u001b[38;2;102;0;255m╗\u001b[39m\u001b[38;2;152;0;255m \u001b[39m\u001b[38;2;203;0;255m \u001b[39m\u001b[38;2;254;0;255m \u001b[39m\u001b[38;2;255;0;203m \u001b[39m\u001b[38;2;255;0;152m╔\u001b[39m\u001b[38;2;255;0;102m╗\u001b[39m\u001b[38;2;255;0;51m \u001b[39m\u001b[38;2;255;0;0m \u001b[39m\u001b[38;2;255;50;0m \u001b[39m\u001b[38;2;255;101;0m \u001b[39m\u001b[38;2;255;153;0m \u001b[39m\u001b[38;2;255;203;0m╔\u001b[39m\u001b[38;2;254;255;0m═\u001b[39m\u001b[38;2;204;255;0m╗\u001b[39m\u001b[38;2;153;255;0m \u001b[39m\u001b[38;2;101;255;0m \u001b[39m\u001b[38;2;50;255;0m \u001b[39m\u001b[38;2;0;255;0m \u001b[39m\n                                                           \u001b[38;2;0;0;255m╠\u001b[39m\u001b[38;2;51;0;255m═\u001b[39m\u001b[38;2;102;0;255m╣\u001b[39m\u001b[38;2;152;0;255m \u001b[39m\u001b[38;2;203;0;255m \u001b[39m\u001b[38;2;254;0;255m \u001b[39m\u001b[38;2;255;0;203m \u001b[39m\u001b[38;2;255;0;152m╠\u001b[39m\u001b[38;2;255;0;102m╩\u001b[39m\u001b[38;2;255;0;51m╗\u001b[39m\u001b[38;2;255;0;0m \u001b[39m\u001b[38;2;255;50;0m \u001b[39m\u001b[38;2;255;101;0m \u001b[39m\u001b[38;2;255;153;0m \u001b[39m\u001b[38;2;255;203;0m║\u001b[39m\u001b[38;2;254;255;0m \u001b[39m\u001b[38;2;204;255;0m \u001b[39m\u001b[38;2;153;255;0m \u001b[39m\u001b[38;2;101;255;0m \u001b[39m\u001b[38;2;50;255;0m \u001b[39m\u001b[38;2;0;255;0m \u001b[39m\n                                                           \u001b[38;2;0;0;255m╩\u001b[39m\u001b[38;2;51;0;255m \u001b[39m\u001b[38;2;102;0;255m╩\u001b[39m\u001b[38;2;152;0;255m \u001b[39m\u001b[38;2;203;0;255m \u001b[39m\u001b[38;2;254;0;255m \u001b[39m\u001b[38;2;255;0;203m \u001b[39m\u001b[38;2;255;0;152m╚\u001b[39m\u001b[38;2;255;0;102m═\u001b[39m\u001b[38;2;255;0;51m╝\u001b[39m\u001b[38;2;255;0;0m \u001b[39m\u001b[38;2;255;50;0m \u001b[39m\u001b[38;2;255;101;0m \u001b[39m\u001b[38;2;255;153;0m \u001b[39m\u001b[38;2;255;203;0m╚\u001b[39m\u001b[38;2;254;255;0m═\u001b[39m\u001b[38;2;204;255;0m╝\u001b[39m\u001b[38;2;153;255;0m \u001b[39m\u001b[38;2;101;255;0m \u001b[39m\u001b[38;2;50;255;0m \u001b[39m\u001b[38;2;0;255;0m \u001b[39m\n\n\n\n                                                           \u001b[38;2;0;0;255m \u001b[39m\u001b[38;2;51;0;255m \u001b[39m\u001b[38;2;102;0;255m \u001b[39m\u001b[38;2;152;0;255m \u001b[39m\u001b[38;2;203;0;255m \u001b[39m\u001b[38;2;254;0;255m \u001b[39m\u001b[38;2;255;0;203m \u001b[39m\u001b[38;2;255;0;152m╔\u001b[39m\u001b[38;2;255;0;102m═\u001b[39m\u001b[38;2;255;0;51m╗\u001b[39m\u001b[38;2;255;0;0m \u001b[39m\u001b[38;2;255;50;0m \u001b[39m\u001b[38;2;255;101;0m \u001b[39m\u001b[38;2;255;153;0m \u001b[39m\u001b[38;2;255;203;0m╔\u001b[39m\u001b[38;2;254;255;0m═\u001b[39m\u001b[38;2;204;255;0m╗\u001b[39m\u001b[38;2;153;255;0m \u001b[39m\u001b[38;2;101;255;0m \u001b[39m\u001b[38;2;50;255;0m \u001b[39m\u001b[38;2;0;255;0m \u001b[39m\n                                                           \u001b[38;2;0;0;255m \u001b[39m\u001b[38;2;51;0;255m \u001b[39m\u001b[38;2;102;0;255m \u001b[39m\u001b[38;2;152;0;255m \u001b[39m\u001b[38;2;203;0;255m \u001b[39m\u001b[38;2;254;0;255m \u001b[39m\u001b[38;2;255;0;203m \u001b[39m\u001b[38;2;255;0;152m╠\u001b[39m\u001b[38;2;255;0;102m═\u001b[39m\u001b[38;2;255;0;51m╣\u001b[39m\u001b[38;2;255;0;0m \u001b[39m\u001b[38;2;255;50;0m \u001b[39m\u001b[38;2;255;101;0m \u001b[39m\u001b[38;2;255;153;0m \u001b[39m\u001b[38;2;255;203;0m╠\u001b[39m\u001b[38;2;254;255;0m═\u001b[39m\u001b[38;2;204;255;0m╣\u001b[39m\u001b[38;2;153;255;0m \u001b[39m\u001b[38;2;101;255;0m \u001b[39m\u001b[38;2;50;255;0m \u001b[39m\u001b[38;2;0;255;0m \u001b[39m\n                                                           \u001b[38;2;0;0;255m \u001b[39m\u001b[38;2;51;0;255m \u001b[39m\u001b[38;2;102;0;255m \u001b[39m\u001b[38;2;152;0;255m \u001b[39m\u001b[38;2;203;0;255m \u001b[39m\u001b[38;2;254;0;255m \u001b[39m\u001b[38;2;255;0;203m \u001b[39m\u001b[38;2;255;0;152m╩\u001b[39m\u001b[38;2;255;0;102m \u001b[39m\u001b[38;2;255;0;51m╩\u001b[39m\u001b[38;2;255;0;0m \u001b[39m\u001b[38;2;255;50;0m \u001b[39m\u001b[38;2;255;101;0m \u001b[39m\u001b[38;2;255;153;0m \u001b[39m\u001b[38;2;255;203;0m╩\u001b[39m\u001b[38;2;254;255;0m \u001b[39m\u001b[38;2;204;255;0m╩\u001b[39m\u001b[38;2;153;255;0m \u001b[39m\u001b[38;2;101;255;0m \u001b[39m\u001b[38;2;50;255;0m \u001b[39m\u001b[38;2;0;255;0m \u001b[39m\u001b[49m\n';

	expect( output.stdout ).toBe( expected );
	expect( output.stderr ).toBe('');
});


test(`Bin - Will run all flags, gradient and i flag with chrome font`, () => {
	const output = Spawn(
		'node',
		[
			path.normalize(`${__dirname }/../../src/bin.js`),
			'abc|aa',
			'-f', 'chrome',
			'-a', 'right',
			'-g', 'blue,green',
			'-i',
			'-b', 'red',
			'-l', '4',
			'-z', '3',
			'-s',
			'-m', '80',
		],
		{
			encoding : 'utf8',
			env: { ...process.env },
		}
	);

	const expected = '\u001b[48;2;255;0;0m\n                                                           \u001b[38;2;0;0;255m╔\u001b[39m\u001b[38;2;51;0;255m═\u001b[39m\u001b[38;2;102;0;255m╗\u001b[39m\u001b[38;2;152;0;255m \u001b[39m\u001b[38;2;203;0;255m \u001b[39m\u001b[38;2;254;0;255m \u001b[39m\u001b[38;2;255;0;203m \u001b[39m\u001b[38;2;255;0;152m╔\u001b[39m\u001b[38;2;255;0;102m╗\u001b[39m\u001b[38;2;255;0;51m \u001b[39m\u001b[38;2;255;0;0m \u001b[39m\u001b[38;2;255;50;0m \u001b[39m\u001b[38;2;255;101;0m \u001b[39m\u001b[38;2;255;153;0m \u001b[39m\u001b[38;2;255;203;0m╔\u001b[39m\u001b[38;2;254;255;0m═\u001b[39m\u001b[38;2;204;255;0m╗\u001b[39m\u001b[38;2;153;255;0m \u001b[39m\u001b[38;2;101;255;0m \u001b[39m\u001b[38;2;50;255;0m \u001b[39m\u001b[38;2;0;255;0m \u001b[39m\n                                                           \u001b[38;2;0;0;255m╠\u001b[39m\u001b[38;2;51;0;255m═\u001b[39m\u001b[38;2;102;0;255m╣\u001b[39m\u001b[38;2;152;0;255m \u001b[39m\u001b[38;2;203;0;255m \u001b[39m\u001b[38;2;254;0;255m \u001b[39m\u001b[38;2;255;0;203m \u001b[39m\u001b[38;2;255;0;152m╠\u001b[39m\u001b[38;2;255;0;102m╩\u001b[39m\u001b[38;2;255;0;51m╗\u001b[39m\u001b[38;2;255;0;0m \u001b[39m\u001b[38;2;255;50;0m \u001b[39m\u001b[38;2;255;101;0m \u001b[39m\u001b[38;2;255;153;0m \u001b[39m\u001b[38;2;255;203;0m║\u001b[39m\u001b[38;2;254;255;0m \u001b[39m\u001b[38;2;204;255;0m \u001b[39m\u001b[38;2;153;255;0m \u001b[39m\u001b[38;2;101;255;0m \u001b[39m\u001b[38;2;50;255;0m \u001b[39m\u001b[38;2;0;255;0m \u001b[39m\n                                                           \u001b[38;2;0;0;255m╩\u001b[39m\u001b[38;2;51;0;255m \u001b[39m\u001b[38;2;102;0;255m╩\u001b[39m\u001b[38;2;152;0;255m \u001b[39m\u001b[38;2;203;0;255m \u001b[39m\u001b[38;2;254;0;255m \u001b[39m\u001b[38;2;255;0;203m \u001b[39m\u001b[38;2;255;0;152m╚\u001b[39m\u001b[38;2;255;0;102m═\u001b[39m\u001b[38;2;255;0;51m╝\u001b[39m\u001b[38;2;255;0;0m \u001b[39m\u001b[38;2;255;50;0m \u001b[39m\u001b[38;2;255;101;0m \u001b[39m\u001b[38;2;255;153;0m \u001b[39m\u001b[38;2;255;203;0m╚\u001b[39m\u001b[38;2;254;255;0m═\u001b[39m\u001b[38;2;204;255;0m╝\u001b[39m\u001b[38;2;153;255;0m \u001b[39m\u001b[38;2;101;255;0m \u001b[39m\u001b[38;2;50;255;0m \u001b[39m\u001b[38;2;0;255;0m \u001b[39m\n\n\n\n                                                                  \u001b[38;2;0;0;255m╔\u001b[39m\u001b[38;2;78;0;255m═\u001b[39m\u001b[38;2;156;0;255m╗\u001b[39m\u001b[38;2;235;0;255m \u001b[39m\u001b[38;2;255;0;196m \u001b[39m\u001b[38;2;255;0;117m \u001b[39m\u001b[38;2;255;0;39m \u001b[39m\u001b[38;2;255;39;0m╔\u001b[39m\u001b[38;2;255;117;0m═\u001b[39m\u001b[38;2;255;196;0m╗\u001b[39m\u001b[38;2;235;255;0m \u001b[39m\u001b[38;2;156;255;0m \u001b[39m\u001b[38;2;78;255;0m \u001b[39m\u001b[38;2;0;255;0m \u001b[39m\n                                                                  \u001b[38;2;0;0;255m╠\u001b[39m\u001b[38;2;78;0;255m═\u001b[39m\u001b[38;2;156;0;255m╣\u001b[39m\u001b[38;2;235;0;255m \u001b[39m\u001b[38;2;255;0;196m \u001b[39m\u001b[38;2;255;0;117m \u001b[39m\u001b[38;2;255;0;39m \u001b[39m\u001b[38;2;255;39;0m╠\u001b[39m\u001b[38;2;255;117;0m═\u001b[39m\u001b[38;2;255;196;0m╣\u001b[39m\u001b[38;2;235;255;0m \u001b[39m\u001b[38;2;156;255;0m \u001b[39m\u001b[38;2;78;255;0m \u001b[39m\u001b[38;2;0;255;0m \u001b[39m\n                                                                  \u001b[38;2;0;0;255m╩\u001b[39m\u001b[38;2;78;0;255m \u001b[39m\u001b[38;2;156;0;255m╩\u001b[39m\u001b[38;2;235;0;255m \u001b[39m\u001b[38;2;255;0;196m \u001b[39m\u001b[38;2;255;0;117m \u001b[39m\u001b[38;2;255;0;39m \u001b[39m\u001b[38;2;255;39;0m╩\u001b[39m\u001b[38;2;255;117;0m \u001b[39m\u001b[38;2;255;196;0m╩\u001b[39m\u001b[38;2;235;255;0m \u001b[39m\u001b[38;2;156;255;0m \u001b[39m\u001b[38;2;78;255;0m \u001b[39m\u001b[38;2;0;255;0m \u001b[39m\u001b[49m\n';

	expect( output.stdout ).toBe( expected );
	expect( output.stderr ).toBe('');
});


test(`Bin - Will run all flags, gradient, i flag and transition with chrome font`, () => {
	const output = Spawn(
		'node',
		[
			path.normalize(`${__dirname }/../../src/bin.js`),
			'abc|aa',
			'-f', 'chrome',
			'-a', 'right',
			'-g', 'blue,green',
			'-i',
			'-t',
			'-b', 'red',
			'-l', '4',
			'-z', '3',
			'-s',
			'-m', '80',
		],
		{
			encoding : 'utf8',
			env: { ...process.env },
		}
	);

	const expected = '\u001b[48;2;255;0;0m\n                                                           \u001b[38;2;0;0;255m╔\u001b[39m\u001b[38;2;0;12;242m═\u001b[39m\u001b[38;2;0;25;229m╗\u001b[39m\u001b[38;2;0;38;216m \u001b[39m\u001b[38;2;0;51;204m \u001b[39m\u001b[38;2;0;63;191m \u001b[39m\u001b[38;2;0;76;178m \u001b[39m\u001b[38;2;0;89;165m╔\u001b[39m\u001b[38;2;0;102;153m╗\u001b[39m\u001b[38;2;0;114;140m \u001b[39m\u001b[38;2;0;127;127m \u001b[39m\u001b[38;2;0;140;114m \u001b[39m\u001b[38;2;0;153;102m \u001b[39m\u001b[38;2;0;165;89m \u001b[39m\u001b[38;2;0;178;76m╔\u001b[39m\u001b[38;2;0;191;63m═\u001b[39m\u001b[38;2;0;204;51m╗\u001b[39m\u001b[38;2;0;216;38m \u001b[39m\u001b[38;2;0;229;25m \u001b[39m\u001b[38;2;0;242;12m \u001b[39m\u001b[38;2;0;255;0m \u001b[39m\n                                                           \u001b[38;2;0;0;255m╠\u001b[39m\u001b[38;2;0;12;242m═\u001b[39m\u001b[38;2;0;25;229m╣\u001b[39m\u001b[38;2;0;38;216m \u001b[39m\u001b[38;2;0;51;204m \u001b[39m\u001b[38;2;0;63;191m \u001b[39m\u001b[38;2;0;76;178m \u001b[39m\u001b[38;2;0;89;165m╠\u001b[39m\u001b[38;2;0;102;153m╩\u001b[39m\u001b[38;2;0;114;140m╗\u001b[39m\u001b[38;2;0;127;127m \u001b[39m\u001b[38;2;0;140;114m \u001b[39m\u001b[38;2;0;153;102m \u001b[39m\u001b[38;2;0;165;89m \u001b[39m\u001b[38;2;0;178;76m║\u001b[39m\u001b[38;2;0;191;63m \u001b[39m\u001b[38;2;0;204;51m \u001b[39m\u001b[38;2;0;216;38m \u001b[39m\u001b[38;2;0;229;25m \u001b[39m\u001b[38;2;0;242;12m \u001b[39m\u001b[38;2;0;255;0m \u001b[39m\n                                                           \u001b[38;2;0;0;255m╩\u001b[39m\u001b[38;2;0;12;242m \u001b[39m\u001b[38;2;0;25;229m╩\u001b[39m\u001b[38;2;0;38;216m \u001b[39m\u001b[38;2;0;51;204m \u001b[39m\u001b[38;2;0;63;191m \u001b[39m\u001b[38;2;0;76;178m \u001b[39m\u001b[38;2;0;89;165m╚\u001b[39m\u001b[38;2;0;102;153m═\u001b[39m\u001b[38;2;0;114;140m╝\u001b[39m\u001b[38;2;0;127;127m \u001b[39m\u001b[38;2;0;140;114m \u001b[39m\u001b[38;2;0;153;102m \u001b[39m\u001b[38;2;0;165;89m \u001b[39m\u001b[38;2;0;178;76m╚\u001b[39m\u001b[38;2;0;191;63m═\u001b[39m\u001b[38;2;0;204;51m╝\u001b[39m\u001b[38;2;0;216;38m \u001b[39m\u001b[38;2;0;229;25m \u001b[39m\u001b[38;2;0;242;12m \u001b[39m\u001b[38;2;0;255;0m \u001b[39m\n\n\n\n                                                                  \u001b[38;2;0;0;255m╔\u001b[39m\u001b[38;2;0;19;235m═\u001b[39m\u001b[38;2;0;39;215m╗\u001b[39m\u001b[38;2;0;58;196m \u001b[39m\u001b[38;2;0;78;176m \u001b[39m\u001b[38;2;0;98;156m \u001b[39m\u001b[38;2;0;117;137m \u001b[39m\u001b[38;2;0;137;117m╔\u001b[39m\u001b[38;2;0;156;98m═\u001b[39m\u001b[38;2;0;176;78m╗\u001b[39m\u001b[38;2;0;196;58m \u001b[39m\u001b[38;2;0;215;39m \u001b[39m\u001b[38;2;0;235;19m \u001b[39m\u001b[38;2;0;255;0m \u001b[39m\n                                                                  \u001b[38;2;0;0;255m╠\u001b[39m\u001b[38;2;0;19;235m═\u001b[39m\u001b[38;2;0;39;215m╣\u001b[39m\u001b[38;2;0;58;196m \u001b[39m\u001b[38;2;0;78;176m \u001b[39m\u001b[38;2;0;98;156m \u001b[39m\u001b[38;2;0;117;137m \u001b[39m\u001b[38;2;0;137;117m╠\u001b[39m\u001b[38;2;0;156;98m═\u001b[39m\u001b[38;2;0;176;78m╣\u001b[39m\u001b[38;2;0;196;58m \u001b[39m\u001b[38;2;0;215;39m \u001b[39m\u001b[38;2;0;235;19m \u001b[39m\u001b[38;2;0;255;0m \u001b[39m\n                                                                  \u001b[38;2;0;0;255m╩\u001b[39m\u001b[38;2;0;19;235m \u001b[39m\u001b[38;2;0;39;215m╩\u001b[39m\u001b[38;2;0;58;196m \u001b[39m\u001b[38;2;0;78;176m \u001b[39m\u001b[38;2;0;98;156m \u001b[39m\u001b[38;2;0;117;137m \u001b[39m\u001b[38;2;0;137;117m╩\u001b[39m\u001b[38;2;0;156;98m \u001b[39m\u001b[38;2;0;176;78m╩\u001b[39m\u001b[38;2;0;196;58m \u001b[39m\u001b[38;2;0;215;39m \u001b[39m\u001b[38;2;0;235;19m \u001b[39m\u001b[38;2;0;255;0m \u001b[39m\u001b[49m\n';

	expect( output.stdout ).toBe( expected );
	expect( output.stderr ).toBe('');
});
